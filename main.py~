#!/usr/bin/python

from math import sqrt
from random import shuffle
from itertools import combinations, permutations
from sys import stdout
from math import sqrt

import model
import time
import sys
import pycurl
import re
	
class Test:
    def __init__(self):
        self.contents = ''
	
    def body_callback(self, buf):
        self.contents = self.contents + buf
	
def stringify(multiline):
    return ''.join(multiline.split('\n'))

def wiktionaryword(page):
    try:
        m = re.search('<ol>(.*?)</ol>', stringify(page))
        definitions = m.group(0)
        print '!!!' + stringify(page)

        m = re.search('<li>(.*?)</li>', definitions)
        definitions = m.group()
        return str(definitions)

    except AttributeError:
        return False

def curldef(word):

    t = Test()
    c = pycurl.Curl()
    c.setopt(c.URL, 'http://en.wiktionary.org/wiki/'+word)
    c.setopt(c.WRITEFUNCTION, t.body_callback)
    c.perform()
    c.close()
    
    defs = [wiktionaryword(t.contents)]
    if defs[0]:
        return defs[0]
    else:
        return "nodef"

################################################################################
# output format
#
# ID     WORD    LEN     BLANKS   PROB    PTS     DEF
#
#
################################################################################

def title(string):
    center = " ".join(list(string.upper()))+" "
    pad = " " * ((78 - len(center)) / 2 )
    return "#" + pad + center + pad + "#"

def console_out():
    print "#"*80
    print title("jumbucks beta")
    print "#"*80

def main():
    console_out()
    outfile = open("words.dat","w")
    bag = model.generate_bag_list()
    tilebag = model.TileBag("tiles.txt")

    #outfile = open("export.tsv","w")
    #dictionaries = ["words/2-4.txt","words/5.txt","words/6.txt","words/7.txt","words/8.txt"]
    dictionaries = ["test/2-4.txt","test/5.txt","test/6.txt","words/7.txt","words/8.txt"]

    serial = 0

    for d in dictionaries:
        print "\nOpening dictionary "+d+"..."
        dictionary = open(d,"r")
        linenum = 0
    # loop over contents
        for word in dictionary.readlines():
            #time.sleep(1)
            if False:
                break
            #if (not(has(word,'jatgoia'))):
            #if (not(comprisedof(word,'jatgoia'))):    
            #    continue
            if linenum % 100 == 0:
                stdout.write(".")
                stdout.flush()
            if (linenum + 1 ) % 8000 == 0:
                stdout.write('\n')
                stdout.flush()

            word = word.strip()
            s = model.Spelling(word,tilebag)

            linenum += 1
            serial += 1

            outfile.write(str(serial) + '\t' + str(s) + '\n')#+ curldef(word))
            #print str(serial) + '\t' + str(s) + '\t' + curldef(word)
    
    outfile.close()

main()
